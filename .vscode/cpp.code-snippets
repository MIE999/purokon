{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"purokon preset": {
		"prefix": "puro",
		"body": [
			"#include <bits/stdc++.h>",
			"using namespace std;",
			"",
			"//def",
			"#define debug(x) cout << #x << \": \" << x << endl",
			"#define out(x) cout << x << endl",
			"#define repeat(i, a, b) for (int i = (int)(a); i < (int)(b); i++)",
			"#define revrepeat(i, a, b) for (int i = (int)(b)-1; i >= (int)(a); i--)",
			"#define rep(i, n) for (int i = 0; i < (int)(n); i++)",
			"#define revrep(i, n) for (int i = (int)(n)-1; i >= 0; i--)",
			"#define foreach(e, v) for (auto &e : v)",
			"#define all(x) (x).begin(), (x).end()",
			"#define CYES cout << \"Yes\" << endl",
			"#define CNO cout << \"No\" << endl",
			"#define SPC(x) cout << fixed << setprecision(x)",
			"#define ZERO(a) memset(a, 0, sizeof(a))",
			"#define MINUS(a) memset(a, 0xff, sizeof(a))",
			"",
			"typedef long long ll;",
			"typedef long double ld;",
			"typedef vector<int> vi;",
			"typedef vector<vector<int>> vii;",
			"typedef vector<ll> vl;",
			"typedef vector<vector<ll>> vll;",
			"typedef pair<int, int> P;",
			"constexpr int MOD = 1e9 + 7;",
			"constexpr int INF = __INT_MAX__; // 2^31 - 1",
			"constexpr long long INFLL = __LONG_LONG_MAX__; // 2^61 - 1",
			"constexpr int MAX_N = 1e5 + 5;",
			"constexpr double PI = acos(-1);",
			"",
			"int main() {",
			"\tcin.tie(0);",
			"\tios::sync_with_stdio(false);",
			"\t",
			"\treturn 0;",
			"}"
		],
		"description": "pre-setup for competitive programming"
	},
	"mint": {
		"prefix": "mint",
		"body": [
			"struct mint {",
			"\t// Preparation: MOD is alrejady defined.",
			"\tll value;",
			"\tmint(ll value = 0) : value((value % MOD + MOD) % MOD) {}",
			"\tmint pow(ll t) const {",
			"\t\tif (!t) return 1;",
			"\t\tmint a = pow(t >> 1);",
			"\t\ta *= a;",
			"\t\tif (t & 1) a *= *this;",
			"\t\treturn a;",
			"\t}",
			"\tmint pow(mint m) const {",
			"\t\treturn pow(m.value);",
			"\t}",
			"\tmint inv() const {",
			"\t\tll a = value, b = MOD, u = 1, v = 0;",
			"\t\twhile (b) {",
			"\t\tll t = a / b;",
			"\t\ta -= t * b;",
			"\t\tswap(a, b);",
			"\t\tu -= t * v;",
			"\t\tswap(u, v);",
			"\t\t}",
			"\t\tu %= MOD;",
			"\t\treturn u;",
			"\t}",
			"\tmint &operator+=(const mint a) {",
			"\t\tif ((value += a.value) >= MOD) value -= MOD;",
			"\t\treturn *this;",
			"\t}",
			"\tmint &operator-=(const mint a) {",
			"\t\tif ((value += MOD - a.value) >= MOD) value -= MOD;",
			"\t\treturn *this;",
			"\t}",
			"\tmint &operator*=(const mint a) {",
			"\t\t(value *= a.value) %= MOD;",
			"\t\treturn *this;",
			"\t}",
			"\tmint &operator/=(const mint a) {",
			"\t\treturn (*this) *= a.inv();",
			"\t}",
			"\tmint operator+(const mint a) const {",
			"\t\tmint res(*this);",
			"\t\treturn res += a;",
			"\t}",
			"\tmint operator-(const mint a) const {",
			"\t\tmint res(*this);",
			"\t\treturn res -= a;",
			"\t}",
			"\tmint operator*(const mint a) const {",
			"\t\tmint res(*this);",
			"\t\treturn res *= a;",
			"\t}",
			"\tmint operator/(const mint a) const {",
			"\t\tmint res(*this);",
			"\t\treturn res /= a;",
			"\t}",
			"};"
		],
		"description": "struct mint"
	},
	"COMinit": {
		"prefix": "cominit",
		"body": [
			"long long fac[MAX_N], finv[MAX_N], inv[MAX_N];",
			"// テーブルを作る前処理 from: https://qiita.com/drken/items/3b4fdf0a78e7a138cd9a",
			"void COMinit() {",
			"fac[0] = fac[1] = 1;",
			"finv[0] = finv[1] = 1;",
			"inv[1] = 1;",
			"for (int i = 2; i < MAX_N; i++) {",
			"fac[i] = fac[i - 1] * i % MOD;",
			"inv[i] = MOD - inv[MOD % i] * (MOD / i) % MOD;",
			"finv[i] = finv[i - 1] * inv[i] % MOD;",
			"}",
			"}",
			"// 二項係数計算",
			"long long COM(int n, int k) {",
			"if (n < k) return 0;",
			"if (n < 0 || k < 0) return 0;",
			"return fac[n] * (finv[k] * finv[n - k] % MOD) % MOD;",
			"}",
			"// factorial",
			"long long fact(int n) {",
			"if (n == 1) return fac[n] = 1;",
			"if (fac[n]) return fac[n];",
			"return fac[n] = (fact(n - 1) * n) % MOD;",
			"long long fac[MAX_N], finv[MAX_N], inv[MAX_N];",
			"// テーブルを作る前処理 from: https://qiita.com/drken/items/3b4fdf0a78e7a138cd9a",
			"void COMinit() {",
			"fac[0] = fac[1] = 1;",
			"finv[0] = finv[1] = 1;",
			"inv[1] = 1;",
			"for (int i = 2; i < MAX_N; i++) {",
			"fac[i] = fac[i - 1] * i % MOD;",
			"inv[i] = MOD - inv[MOD % i] * (MOD / i) % MOD;",
			"finv[i] = finv[i - 1] * inv[i] % MOD;",
			"}",
			"}",
			"// 二項係数計算",
			"long long COM(int n, int k) {",
			"if (n < k) return 0;",
			"if (n < 0 || k < 0) return 0;",
			"return fac[n] * (finv[k] * finv[n - k] % MOD) % MOD;",
			"}",
			"// factorial",
			"long long fact(int n) {",
			"if (n == 1) return fac[n] = 1;",
			"if (fac[n]) return fac[n];",
			"return fac[n] = (fact(n - 1) * n) % MOD;",
			"}",
			"}"
		],
		"description": "calculate fact and combination"
	},
	"change max-min": {
		"prefix": "change",
		"body": [
			"template <class T>",
			"inline bool chmin(T &a, T b) {",
			"if (a > b) {",
			"a = b;",
			"return true;",
			"}",
			"return false;",
			"}",
			"template <class T>",
			"inline bool chmax(T &a, T b) {",
			"if (a < b) {",
			"a = b;",
			"return true;",
			"}",
			"return false;",
			"}"
		],
		"description": "chmax and chmin"
	},
	"lambda snippet": {
		"prefix": "lambda",
		"body": [
			"auto ${1} = [${2}](${3}) {",
			"\t${4:/* code */}",
			"}"
		],
		"description": ""
	},
	"rep snippet": {
		"prefix": "rep",
		"body": [
			"rep(${1:i}, ${2}) {",
			"\t${3:/* code */}",
			"}"
		],
		"description": "basic rep"
	},
	"repeat snippet": {
		"prefix": "repeat",
		"body": [
			"repeat(${1:i}, ${2}, ${3}) {",
			"\t${4:/* code */}",
			"}"
		],
		"description": "basic repeat"
	},
	"while": {
		"prefix": "whi",
		"body": [
			"while(true) {",
			"\t${1:/* code */}",
			"}"
		],
		"description": "while true"
	},
	"if": {
		"prefix": "if",
		"body": [
			"if(${1}) {",
			"\t${2:/* code */}",
			"}"
		],
		"description": "basic if"
	},
	"if else": {
		"prefix": "ife",
		"body": [
			"if(${1}) {",
			"\t${2:/* code */}",
			"} else {",
			"\t${3:/* code */}",
			"}"
		],
		"description": "basic if-else"
	},
	"else if": {
		"prefix": "elif",
		"body": [
			"else if(${1}) {",
			"\t${2:/* code */}",
			"}"
		],
		"description": "basic elif"
	}
}
